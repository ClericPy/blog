<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clericpy&#39;s Blog</title>
    <link>https://clericpy.github.io/blog/</link>
    <description>Recent content on Clericpy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Dec 2019 20:48:24 +0800</lastBuildDate>
    
	<atom:link href="https://clericpy.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>回顾软件设计的原则</title>
      <link>https://clericpy.github.io/blog/posts/20191212204823/</link>
      <pubDate>Thu, 12 Dec 2019 20:48:24 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191212204823/</guid>
      <description>鉴于最近又写出大量低质量代码, 所以需要重新回顾一下这些有用的编码哲学.
 主要参照 &amp;lt;一些软件设计的原则&amp;gt; &amp;ndash; 酷壳, 做一下简单理解的笔记.
1. 一句话总结:  大段重复代码要提取函数, 方便复用和统一修改 高层依赖抽象, 抽象去依赖底层实现. 因为高层抽象逻辑很少变, 而底层实现却经常要变 功能之间相互依赖越少越好, 逻辑越独立越好, 不要过度优化和过早优化 底层的每个函数职责尽量单一, 每个类只做好一件事, 功能粒度越细越好 多用接口少用继承. 由上层抽象来统一组合调配, 进而实现完整功能  2. 设计原则明细 面向对象的S.O.L.I.D 原则  Single Responsibility Principle (SRP) – 职责单一原则  一个&amp;rdquo;类&amp;rdquo;只做好一件事, 一个函数只实现一个功能 纯面向过程写代码会导致逻辑不够清晰, 更容易出错  Open/Closed Principle (OCP) – 开闭原则  依赖抽象，而不是实现 对扩展是开放的，而对修改是封闭的 一方面要保证业务层对底层具体实现相隔离, 避免随意修改导致原有功能遭到破坏 另一方面避免修改底层代码而导致未知引用遭到破坏, 产生不期结果  Liskov substitution principle (LSP) – 里氏代换原则  任何基类可以出现的地方，子类一定可以出现 类的继承不要割裂, 一般情况下, 多考虑新增功能, 而不是覆盖父类同名方法 (抽象方法除外)  Interface Segregation Principle (ISP) – 接口隔离原则  把功能实现在接口中，而不是类中 对 python 来说, 将多重继承改为 Mixin 类的组合, 使功能更加内聚, 也避免了方法解析顺序 (MRO) 的混乱  Dependency Inversion Principle (DIP) – 依赖倒置原则  基本等同于上面提到的 &amp;ldquo;Program to an interface, not an implementation&amp;rdquo; 主要解决的问题是: 一般依赖的功能抽象变化比较少, 而底层实现经常会改变 增加复用的安全性, 减少修改成本 高层抽象尽量不变, 迫使底层做改变 功能标准化, 设计一致性   Don’t Repeat Yourself (DRY)  相似代码抽取共性, 构造复用函数 避免出现大坨重复代码, 导致每次逻辑改变时遗漏一些修改 配合正确的函数名, 可读性优于一段段注释  Keep It Simple, Stupid (KISS)  不要把事情搞复杂, 围绕要解决的问题保持简洁 不要臆想出一些不存在的问题而过早优化  Program to an interface, not an implementation  多依靠抽象接口解决问题, 少依赖具体实现, 方便后期修改时保持独立 因为底层常变, 而上层抽象逻辑一般不太改变, 此外, 上层逻辑之间独立性比较强, 而底层的实现容易牵一发而动全身  Command-Query Separation (CQS) – 命令-查询分离原则  Query 功能和 Command 功能不要合并到一起写.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://clericpy.github.io/blog/about/</link>
      <pubDate>Sun, 27 Oct 2019 12:29:53 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/about/</guid>
      <description>About Me Github: https://github.com/ClericPy
Email: clericpy@gmail.com
WebSites My Blog
Python News
Blog Theme joway/hugo-yinyang</description>
    </item>
    
    <item>
      <title>Python 中文教程在 2019 年的选择</title>
      <link>https://clericpy.github.io/blog/posts/20191027113439/</link>
      <pubDate>Sun, 27 Oct 2019 11:34:40 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191027113439/</guid>
      <description>本文不会太大篇幅讲东西, 只是把必要信息罗列一下, 节省 Python 入门时间, 少走弯路.
 前言 Python 的入门中文教程, 如果放在三四年前, 那可以选择的太多了
 廖雪峰 Python3 教程  那个年头确实最好的选择  在线阅读 保持更新新特性 作者知识面比较广   Python 之旅  这个是很后期才看到的, 质量意外的不错  Head First Python  我当年买的入门第一本书, 实际上看完更迷了&amp;hellip;  Learn Python the Hard Way (笨方法学 Python)  曾经稍微看过, 只能说类似于应试教育的刷题培养肌肉记忆的好书  Think Python  图书馆借来看的, 有点旧, 信息量也不算大 但是内容质量非常高  陪孩子学 Python 之类的儿童读物  这种东西&amp;hellip; 不是说不好, 标题让我讨厌  各种网站上的视频教程  说实话, 我真正培养入门兴趣的还正是 B 站已经有的小甲鱼零基础学 Python 视频 视频类型的不枯燥, 有些老师还会讲段子发散思维便于记忆 但是一个视频的信息量真的太少了, 时间充裕的可以试试   但进入 2019 年以来, 以上教程基本已经不算第一梯队的选择了.</description>
    </item>
    
    <item>
      <title>爬虫常用代码片段合集 - [torequests.utils]</title>
      <link>https://clericpy.github.io/blog/posts/20191025183222/</link>
      <pubDate>Fri, 25 Oct 2019 18:32:22 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191025183222/</guid>
      <description>前言 此处省略 150 字引言, 假装以后会补.
正文 以下功能均已收入 torequests
 pip install torequests -U
  查看当前进程的内存占用. 借助 psutil
 代码
def print_mem(unit=&amp;quot;MB&amp;quot;): &amp;quot;&amp;quot;&amp;quot;Show the proc-mem-cost with psutil, use this only for lazinesssss. :param unit: B, KB, MB, GB. &amp;quot;&amp;quot;&amp;quot; try: import psutil, os B = float(psutil.Process(os.getpid()).memory_info().vms) KB = B / 1024 MB = KB / 1024 GB = MB / 1024 result = vars()[unit] print(&amp;quot;memory usage: %.2f(%s)&amp;quot; % (result, unit)) return result except ImportError: print(&amp;quot;pip install psutil first.</description>
    </item>
    
    <item>
      <title>通过 Python &#43; Chrome cURL 重放 HTTP 请求</title>
      <link>https://clericpy.github.io/blog/posts/20191024220923/</link>
      <pubDate>Thu, 24 Oct 2019 22:09:23 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191024220923/</guid>
      <description>众所周知, 一条完整 cURL 命令, 基本可以完整涵盖一次 HTTP 请求的全部信息, 所以, 只要有一句 Curl 命令, 就足以向服务器发起一次完全一样的请求.
 一个 HTTP 请求有多常见?  百度知道答案的点赞 斗鱼直播的一次弹幕 github issues 的一次评论  换句话说, 只要拿到一段 cURL 命令, 就能够将类似上面的各路请求再次复现.
更进一步地说, 既然拿到了命令, 略微修改里面的参数便足以发起与上次请求内容相异的同类请求.
手把手做个实验 实验准备  安装 Python, 并搞一个可以解析 cURL 的库   pip install torequests -U
torequests &amp;gt;= 4.8.18, 刚修复了一个 \n 导致提交出错的 bug
  安装一个 Chrome 浏览器  实验步骤 from torequests.utils import curlparse import requests curlstring = r&#39;&#39;&#39;curl &#39;https://github.</description>
    </item>
    
  </channel>
</rss>