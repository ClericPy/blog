<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Clericpy&#39;s Blog</title>
    <link>https://clericpy.github.io/blog/categories/python/</link>
    <description>Recent content in Python on Clericpy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jan 2020 15:11:38 +0800</lastBuildDate>
    
	<atom:link href="https://clericpy.github.io/blog/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入浅出 CDP (Chrome DevTools Protocol)</title>
      <link>https://clericpy.github.io/blog/posts/20200114151137/</link>
      <pubDate>Tue, 14 Jan 2020 15:11:38 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20200114151137/</guid>
      <description>背景 自从 Chrome 59 发布支持 &amp;ndash;headless 启动参数以后 (Windows 上是 60 版本), 轻量级浏览器内核就不再是 webdriver 一家独大, 甚至 phantomjs 作者也发文表示不再维护该项目, 国外也有越来越多的文章推荐使用 headless Chrome 代替过去 selenium + webdriver 的方式进行 Web 测试或者爬虫相关工作.
目前国内实际上使用 headless Chrome 的并不少, 只不过目前大量营销号的存在, 导致为了点击量频繁刷文, 进而把早年间 selenium 用作爬虫的旧文章重新翻到读者眼前, 所以遇到各种稀奇古怪的问题, 初学者使用体验较差.
selenium 作为老牌 Web 测试手段闻名已久, 在高级功能 API 层面非常成熟, 后来也加强了对 Chrome headless 模式下 CDP 的支持, 目前依然拥有大量用户在使用.
简单提一下 webdriver 方式的一些不足:
 默认参数启动时很容易被服务端发现 性能与 Chrome headless 相比, 较差 存在了无数年的内存泄漏问题 不像 Chrome 有大厂在背后支撑, 上千 issues 解决不完 无法作为完整浏览器使用和调试  简而言之, 都 2020 年了, 不要再抱着 selenium 一根筋不放了</description>
    </item>
    
    <item>
      <title>闲谈 Python 打包发布</title>
      <link>https://clericpy.github.io/blog/posts/20191221143647/</link>
      <pubDate>Sat, 21 Dec 2019 14:36:47 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191221143647/</guid>
      <description>1 发布到 pypi setup.py 这套东西已经很成熟了, 不再赘述, 当前主流的是 twine + wheel 的方式, 好处很简单, 就是 pip install 安装方式省心省力
目前也比较流行 poetry 这个库的 publish 功能进行发布
2 作为 pyz 发布 Shiv 有 PEP441 的加成, 目前 Shiv 在这方面做的已经非常熟练了:
 通过 pip 收集所需要的第三方库 通过 shebang 来指定 Python 解释器路径 通过 zipapp 相关功能把整个 package 打包成一个 pyz 压缩文件(实质是zip文件换了个扩展名) 通过 _bootstrap 指定执行条件 module:app 通过命令行执行整个打包过程  优点:  单文件上传下载简单方便 可以直接使用 python xxx.pyz 来执行 package 里的 main.py 也可以将 xxx.pyz 当作一个环境, 来执行其它的 py 脚本, 比如 python xxx.</description>
    </item>
    
    <item>
      <title>Python 中文教程在 2019 年的选择</title>
      <link>https://clericpy.github.io/blog/posts/20191027113439/</link>
      <pubDate>Sun, 27 Oct 2019 11:34:40 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191027113439/</guid>
      <description>本文不会太大篇幅讲东西, 只是把必要信息罗列一下, 节省 Python 入门时间, 少走弯路.
 前言 Python 的入门中文教程, 如果放在三四年前, 那可以选择的太多了
 廖雪峰 Python3 教程  那个年头确实最好的选择  在线阅读 保持更新新特性 作者知识面比较广   Python 之旅  这个是很后期才看到的, 质量意外的不错  Head First Python  我当年买的入门第一本书, 实际上看完更迷了&amp;hellip;  Learn Python the Hard Way (笨方法学 Python)  曾经稍微看过, 只能说类似于应试教育的刷题培养肌肉记忆的好书  Think Python  图书馆借来看的, 有点旧, 信息量也不算大 但是内容质量非常高  陪孩子学 Python 之类的儿童读物  这种东西&amp;hellip; 不是说不好, 标题让我讨厌  各种网站上的视频教程  说实话, 我真正培养入门兴趣的还正是 B 站已经有的小甲鱼零基础学 Python 视频 视频类型的不枯燥, 有些老师还会讲段子发散思维便于记忆 但是一个视频的信息量真的太少了, 时间充裕的可以试试   但进入 2019 年以来, 以上教程基本已经不算第一梯队的选择了.</description>
    </item>
    
    <item>
      <title>爬虫常用代码片段合集 - [torequests.utils]</title>
      <link>https://clericpy.github.io/blog/posts/20191025183222/</link>
      <pubDate>Fri, 25 Oct 2019 18:32:22 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191025183222/</guid>
      <description>前言 此处省略 150 字引言, 假装以后会补.
正文 以下功能均已收入 torequests
 pip install torequests -U
  查看当前进程的内存占用. 借助 psutil
 代码
def print_mem(unit=&amp;quot;MB&amp;quot;): &amp;quot;&amp;quot;&amp;quot;Show the proc-mem-cost with psutil, use this only for lazinesssss. :param unit: B, KB, MB, GB. &amp;quot;&amp;quot;&amp;quot; try: import psutil, os B = float(psutil.Process(os.getpid()).memory_info().vms) KB = B / 1024 MB = KB / 1024 GB = MB / 1024 result = vars()[unit] print(&amp;quot;memory usage: %.2f(%s)&amp;quot; % (result, unit)) return result except ImportError: print(&amp;quot;pip install psutil first.</description>
    </item>
    
    <item>
      <title>通过 Python &#43; Chrome cURL 重放 HTTP 请求</title>
      <link>https://clericpy.github.io/blog/posts/20191024220923/</link>
      <pubDate>Thu, 24 Oct 2019 22:09:23 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191024220923/</guid>
      <description>众所周知, 一条完整 cURL 命令, 基本可以完整涵盖一次 HTTP 请求的全部信息, 所以, 只要有一句 Curl 命令, 就足以向服务器发起一次完全一样的请求.
 一个 HTTP 请求有多常见?  百度知道答案的点赞 斗鱼直播的一次弹幕 github issues 的一次评论  换句话说, 只要拿到一段 cURL 命令, 就能够将类似上面的各路请求再次复现.
更进一步地说, 既然拿到了命令, 略微修改里面的参数便足以发起与上次请求内容相异的同类请求.
手把手做个实验 实验准备  安装 Python, 并搞一个可以解析 cURL 的库   pip install torequests -U
torequests &amp;gt;= 4.8.18, 刚修复了一个 \n 导致提交出错的 bug
  安装一个 Chrome 浏览器  实验步骤 from torequests.utils import curlparse import requests curlstring = r&#39;&#39;&#39;curl &#39;https://github.</description>
    </item>
    
  </channel>
</rss>