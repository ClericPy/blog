<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Clericpy&#39;s Blog</title>
    <link>https://clericpy.github.io/blog/categories/coding/</link>
    <description>Recent content in Coding on Clericpy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Dec 2019 00:14:06 +0800</lastBuildDate>
    
	<atom:link href="https://clericpy.github.io/blog/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式拾遗</title>
      <link>https://clericpy.github.io/blog/posts/20191221001405/</link>
      <pubDate>Sat, 21 Dec 2019 00:14:06 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191221001405/</guid>
      <description>没有什么 &amp;ldquo;新瓶装旧酒&amp;rdquo;, 希望温故而知新
 快速回顾, 具体细节不多讲, 可能有理解不对的地方, 请留言指正 Discussions · ClericPy/blog
示例代码: Python
设计模式简介 1 简单工厂 Simple Factory &amp;ldquo;工厂&amp;rdquo; 顾名思义就是负责生产产品(对象)的地方, 简单工厂则主要处理单一产品等级结构的情况由一个工厂类来决定创建哪个 / 哪些对象, 将创建对象的操作集中在一起, 使之与对象的使用解耦将对象的创建与使用解耦, 也就是俗称的:** **要什么就造什么现实案例: 宠物店新增宠物
class AnimalFactory(object): &amp;#34;&amp;#34;&amp;#34;动物工厂, 负责产生动物&amp;#34;&amp;#34;&amp;#34; @staticmethod def create_animal(name): if name == &amp;#39;Cat&amp;#39;: return Cat() elif name == &amp;#39;Dog&amp;#39;: return Dog() def main(): dog = AnimalFactory.create_animal(&amp;#39;Dog&amp;#39;) cat = AnimalFactory.create_animal(&amp;#39;Cat&amp;#39;) if __name__ == &amp;#34;__main__&amp;#34;: main() 2 工厂方法 Factory Method 基类负责抽象一个工厂方法(接口), 而不用关心具体如何实现, 具体实现让子类来负责现实案例: 动物园新增动物
import abc class AnimalFactory(metaclass=abc.</description>
    </item>
    
    <item>
      <title>回顾软件设计的原则</title>
      <link>https://clericpy.github.io/blog/posts/20191212204823/</link>
      <pubDate>Thu, 12 Dec 2019 20:48:24 +0800</pubDate>
      
      <guid>https://clericpy.github.io/blog/posts/20191212204823/</guid>
      <description>鉴于最近又写出大量低质量代码, 所以需要重新回顾一下这些有用的编码哲学.
 主要参照 &amp;lt;一些软件设计的原则&amp;gt; &amp;ndash; 酷壳, 做一下简单理解的笔记.
1. 一句话总结:  大段重复代码要提取函数, 方便复用和统一修改 高层依赖抽象, 抽象去依赖底层实现. 主要是避免两个易变模块耦合在一起(业务逻辑/底层实现) 功能之间的相互依赖越少越好, 逻辑越独立越好, 尤其不要产生循环依赖 不要过度优化和过早优化 底层的每个函数职责尽量单一, 每个类只做好一件事, 功能粒度越细越好  无状态无副作用的纯函数是捷径   多用接口少用继承. 由上层抽象来统一组合调配, 进而实现完整功能  2. 设计原则明细 面向对象设计的 S.O.L.I.D 原则   Single Responsibility Principle (SRP) – 单一功能原则
 一个&amp;quot;类&amp;quot;只做好一件事, 一个函数只实现一个功能 纯面向过程写代码会导致逻辑不够清晰, 更容易出错    Open/Closed Principle (OCP) – 开闭原则
 依赖抽象，而不是实现 对扩展开放，而对修改封闭  一方面要保证业务层对底层具体实现相隔离, 避免随意修改导致原有功能遭到破坏 另一方面避免修改底层代码而导致未知引用遭到破坏, 产生不期结果      Liskov Substitution Principle (LSP) – 里氏替换原则</description>
    </item>
    
  </channel>
</rss>